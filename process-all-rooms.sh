#!/usr/bin/env nix-shell
#!nix-shell -i bash -p curl jq file matrix-synapse.tools.synadm -I nixpkgs=channel:nixos-unstable-small
# shellcheck shell=bash

# I don't care about useless cat:
# shellcheck disable=SC2002

set -eu
# set -x
set -o pipefail

homeserver=https://nixos.ems.host
AUTH_TOKEN=$(cat ~/.config/synadm.yaml | grep '^token:'| cut -d' ' -f2)
HOMESERVER=$homeserver
export AUTH_TOKEN
scratch=$(mktemp -d -t tmp.XXXXXXXXXX)
finish() {
  rm -rf "$scratch"
}
trap finish EXIT

enumerate_rooms() (
    offset=0
    while true; do
        synadm  --output json room list --from "$offset" > "$scratch/rooms"

        jq -c ".rooms[]" "$scratch/rooms"

        offset=$(jq -rc .next_batch "$scratch/rooms")
        if [ "$offset" = "null" ]; then
            break
        fi
    done
)

get_room_details() (
  roomid=$1
  synadm -o json room details "$roomid"
)

filter_canonical_is_nixos() (
  jq -c 'select(.canonical_alias != null) | select(.canonical_alias|endswith(":nixos.org"))'
)

make_avatar() (
  roomid=$1
  roomhash=$(md5sum <<<"$roomid" | cut -d' ' -f1)
  filename="$scratch/$roomhash.avatar"

  curl "https://www.gravatar.com/avatar/${roomhash}?d=identicon&f=y&s=2048" > "$filename"
  echo "$filename"
)

upload_media() (
  FILEPATH="${1}"

  mime=$(file --brief --mime "$FILEPATH")

  # Upload image to image.png
  curl \
    --silent \
    -H "Content-Type: $mime;autogenerated" \
    -H "Authorization: Bearer ${AUTH_TOKEN}" \
    -X POST \
    --data-binary "@${FILEPATH}" \
    "${HOMESERVER}/_matrix/media/r0/upload?filename=image.png" \
    | jq -r '.content_uri'
)

set_room_avatar() (
  ROOMID=$1
  MXC=$2

  # Build m.room.avatar event
  EVENT_SET_AVATAR=$(jq -n '{ url: $mxc }' --arg mxc "$MXC")

  # Push event
  curl \
    --silent \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer ${AUTH_TOKEN}" \
    -X PUT \
    --data "${EVENT_SET_AVATAR}" \
    "${HOMESERVER}/_matrix/client/r0/rooms/${ROOMID}/state/m.room.avatar"
)

is_mjolnir_in_room() (
  synadm --output json room members "$room_id" \
    | jq -e '.members | any(. == "@mjolnir:nixos.org")' > /dev/null
)

invite_mjolnir() {
    curl -X POST \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $AUTH_TOKEN" \
      -d '{"user_id":"@mjolnir:nixos.org"}' \
      "$homeserver/_matrix/client/r0/rooms/$1/invite"
}

set_mjolnir_mod() {
    curl --silent -X GET \
      -H "Authorization: Bearer $AUTH_TOKEN" \
      "$homeserver/_matrix/client/r0/rooms/$1/state/m.room.power_levels" \
      -o "$scratch/$1-power_levels"

    jq '.users += {"@mjolnir:nixos.org": 100}' "$scratch/$1-power_levels" > "$scratch/$1-power_levels_new"

    if ! diff <(jq '.' "$scratch/$1-power_levels") <(jq . "$scratch/$1-power_levels_new"); then 
      diff --color=always -y <(jq '.' "$scratch/$1-power_levels") <(jq . "$scratch/$1-power_levels_new") || true
      echo -n "set power level? ctrl-c for no"
      read -r x <&1

      curl -X PUT \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -d @"$scratch/$1-power_levels_new" \
        "$homeserver/_matrix/client/r0/rooms/$1/state/m.room.power_levels"
    fi
}

make_room_visible() {
    curl --silent -X GET \
      -H "Authorization: Bearer $AUTH_TOKEN" \
      "$homeserver/_matrix/client/r0/directory/list/room/$1" \
      -o "$scratch/$1-visibility"

    jq '.visibility = "public"' "$scratch/$1-visibility" > "$scratch/$1-visibility_new"

    if ! diff <(jq '.' "$scratch/$1-visibility") <(jq . "$scratch/$1-visibility_new"); then
      diff --color=always -y <(jq '.' "$scratch/$1-visibility") <(jq . "$scratch/$1-visibility_new") || true
      echo -n "set visibility? ctrl-c for no"
      read -r _ <&1

      curl -X PUT \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $AUTH_TOKEN" \
        -d @"$scratch/$1-visibility_new" \
        "$homeserver/_matrix/client/r0/directory/list/room/$1"
    fi
}

sync_all_rooms() (
  echo "" > log.json.next
  enumerate_rooms | filter_canonical_is_nixos | while read -r room; do
    echo "$room" >> log.json.next
    room_id=$(echo "$room" | jq -r .room_id)
    name=$(echo "$room" | jq -r .name)
    alias=$(echo "$room" | jq -r .canonical_alias)
    join_rules=$(echo "$room" | jq -r .join_rules)

    printf "%s - %s (%s, %s)\n" "$alias" "$name" "$join_rules" "$room_id"


    room_details=$(get_room_details "$room_id")

    case "$room_id" in
    '!XefBDdcYTWQwusaSPo:nixos.org')
      echo "    Skipped (steering committee)"
      continue
      ;;
    '!jPTxKWCUPjbyvvLYIO:nixos.org')
      echo "    Skipped (test room)"
      continue
      ;;
    '!lsRfKPRDCjPurASSRn:nixos.org')
      echo "    Skipped (server's general room)"
      continue
      ;;
    '!NpVmUOFzFUDocXvwrT:libera.chat')
      echo "    Skipped (IRC based, appservices kicks mjolnir out regularly)"
      continue
      ;;
    '!ghIdBdiPllVgAiftOy:nixos.org')
      echo "    Skipped (private discussion room for gender minorities)"
      continue
      ;;
    esac

    (
      # Encryption

      if echo "$room_details" | jq -e '.encryption == null' > /dev/null; then
        printf "    Encryption: none\n"
      else
      case "$room_id" in
        '!qAqmHNDbGMBTaNCArk:nixos.org') : ;& # private infra team
        '!RzfaTVpJMGjJgYuSGd:nixos.org') # moderators
          echo "    Encryption: needed"
          ;;
        *) # ???
          echo "    Encryption: enabled by surprise, pausing so you can fix it"
          read -r x <&1
          ;;
      esac
      fi
    )

    (
      # Mjolnir
        if ! is_mjolnir_in_room "$room_id"; then
          echo -n "    Invite Mjolnir? ctrl c for no"
          read -r x <&1
          invite_mjolnir "$room_id"
        else
          echo "    Mjolnir: Already in room."
        fi

        set_mjolnir_mod "$room_id"
    )

    (
      # Set up room avatars
      if [ "$(echo "$room_details" | jq -r .avatar)" != "null" ]; then
        echo "    Avatar: present"
      else
        avatar=$(make_avatar "$room_id")
        mxc=$(upload_media "$avatar")
        set_room_avatar "$room_id" "$mxc"
        echo "$room_id" >> generated_room_avatars
      fi
    )

    (
      if [ "$join_rules" == "invite" ]; then
        echo "    Publicity: invite-only"
      else
        make_room_visible "$room_id"
      fi
    )
  done

  mv log.json.next log.json
)

sync_all_rooms
